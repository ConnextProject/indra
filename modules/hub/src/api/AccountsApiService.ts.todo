import * as express from 'express'
import {ApiService, Router} from './ApiService'
import WithdrawalsService from '../WithdrawalsService'
import PaymentsDao from '../dao/PaymentsDao'
import ExchangeRateDao from '../dao/ExchangeRateDao'
import log from '../util/log'
import {ownedAddressOrAdmin} from '../util/ownedAddressOrAdmin'
import PaymentHandler from '../PaymentHandler'
import AccountsDao from '../dao/AccountsDao'
import ChainsawDao from '../dao/ChainsawDao'

const LOG = log('AccountsApiService')

export default class AccountsApiService implements ApiService {
  namespace = 'accounts'

  router: Router = Router()

  private accountsDao: AccountsDao

  private paymentsDao: PaymentsDao

  private withdrawalsService: WithdrawalsService

  private exchangeRateDao: ExchangeRateDao

  private chainsawDao: ChainsawDao

  private paymentHandler: PaymentHandler<any, any>

  constructor (
    accountsDao: AccountsDao,
    paymentsDao: PaymentsDao,
    withdrawalsService: WithdrawalsService,
    exchangeRateDao: ExchangeRateDao,
    chainsawDao: ChainsawDao,
    paymentHandler: PaymentHandler<any, any>
  ) {
    this.accountsDao = accountsDao
    this.paymentsDao = paymentsDao
    this.withdrawalsService = withdrawalsService
    this.exchangeRateDao = exchangeRateDao
    this.chainsawDao = chainsawDao
    this.paymentHandler = paymentHandler

    this.doBalance = this.doBalance.bind(this)
    this.doChannels = this.doChannels.bind(this)
    this.doWithdraw = this.doWithdraw.bind(this)
    this.doWithdrawals = this.doWithdrawals.bind(this)
    this.doPaymentHistory = this.doPaymentHistory.bind(this)
    this.doGetWalletMigrations = this.doGetWalletMigrations.bind(this)
    this.doWalletMigrations = this.doWalletMigrations.bind(this)

    this.setupRoutes()
  }

  // implementation removed as part of non-custodial hub migration
  private async doBalance (req: express.Request, res: express.Response) {
    res.sendStatus(501)
  }

  // implementation removed as part of non-custodial hub migration
  private async doChannels (req: express.Request, res: express.Response) {
    res.sendStatus(501)
  }

  // implementation removed as part of non-custodial hub migration
  private async doWithdrawals (req: express.Request, res: express.Response) {
    res.sendStatus(501)
  }

  // implementation removed as part of non-custodial hub migration
  private async doWithdraw (req: express.Request, res: express.Response) {
    res.sendStatus(501)
  }

  private async doPaymentHistory (req: express.Request, res: express.Response) {
    const targetAddr = req.params.address
    const requesterAddr = req.session!.address

    if (!ownedAddressOrAdmin(req)) {
      LOG.info(
        'Blocked attempt to view payment history for {targetAddr} from {requesterAddr}',
        {
          targetAddr,
          requesterAddr
        }
      )
      return res.sendStatus(403)
    }

    let history

    try {
      history = await this.paymentHandler.fetchHistory(targetAddr)
    } catch (err) {
      LOG.error('Failed to fetch payment history: {err}', {err})
      return res.sendStatus(400)
    }

    res.send(history)
  }

  private async doGetWalletMigrations(req: express.Request, res: express.Response) {
    const address = req.params.address
    let migrations

    try {
      migrations = await this.accountsDao.getMigrations(address)
    } catch (err) {
      LOG.error('Failed to fetch wallet migrations: {err}', { err })
      return res.sendStatus(400)
    }

    res.send(migrations)
  }

  private async doWalletMigrations(req: express.Request, res: express.Response) {
    const address = req.params.address
    const ids = req.body.ids
    const response = { succes: false }

    try {
      await this.accountsDao.applyMigrations(address, ids)
      response.succes = true
    } catch (err) {
      LOG.error('Failed to apply wallet migrations: {err}', { err })
      return res.sendStatus(400)
    }

    res.send(response)
  }

  private setupRoutes () {
    this.router.get('/:address/balance', this.doBalance)
    this.router.get('/:address/channelIds', this.doChannels)
    this.router.post('/:address/withdraw', this.doWithdraw)
    this.router.get('/:address/withdrawals', this.doWithdrawals)
    this.router.get('/:address/payments', this.doPaymentHistory)
    this.router.get('/:address/migrations', this.doGetWalletMigrations)
    this.router.post('/:address/migrations', this.doWalletMigrations)
  }
}
