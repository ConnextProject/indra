import * as express from 'express'
import { ApiService , Router} from './ApiService'
import Disbursement, { DisbursementStatus } from '../domain/Disbursement'
import log from '../util/log'
import { Role } from '../Role'
import DisbursementService from '../DisbursementService'

const LOG = log('DisbursementApiService')

export default class DisbursementApiService implements ApiService {
  namespace = 'disbursement'

  router: Router = Router()

  disbursementService: DisbursementService

  constructor(disbursementService: DisbursementService) {
    this.disbursementService = disbursementService

    this.doRequestDisbursement = this.doRequestDisbursement.bind(this)
    this.getCurrentByAddress = this.getCurrentByAddress.bind(this)
    this.doGetBootyDisbursement = this.doGetBootyDisbursement.bind(this)
    this.doRequestBootyDisbursement = this.doRequestBootyDisbursement.bind(this)

    this.setupRoutes()
  }

  private async doRequestDisbursement(
    req: express.Request,
    res: express.Response,
  ) {
    const authorized = req.session!.roles.has(Role.SERVICE)
    if (!authorized) {
      LOG.warn('Service user key not provided.')
      return res.sendStatus(403)
    }

    const { address } = req.body
    if (!address) {
      LOG.warn(
        'Received invalid disbursement request. Aborting. Body received: {body}',
        {
          body: req.body,
        },
      )
      return res.sendStatus(400)
    }

    let result
    try {
      result = await this.disbursementService.disburse(address)
    } catch (error) {
      LOG.warn(error.toString())
      return res.sendStatus(400)
    }

    res.send(result)
  }

  private async getCurrentByAddress(
    req: express.Request,
    res: express.Response,
  ) {
    const { address } = req.params
    if (!address) {
      LOG.warn(
        'Received invalid disbursement request. Aborting. Params received: {params}',
        {
          params: req.params,
        },
      )
      return res.sendStatus(400)
    }

    let result
    try {
      result = await this.disbursementService.getCurrentByAddress(address)
    } catch (error) {
      LOG.warn(error.toString())
      return res.sendStatus(400)
    }

    if (!result) {
      return res.sendStatus(404)
    }

    res.send(result)
  }

  private async doGetBootyDisbursement(req: express.Request, res: express.Response) {
    const address = req.params.address
    const id = req.params.id
    let response = null

    try {
      response = await this.disbursementService.getByAddressAndId(address, id)
    } catch (err) {
      LOG.error('Failed to get disbursement: {err}', { err })
      return res.sendStatus(400)
    }

    res.send(response)
  }

  private async doRequestBootyDisbursement(req: express.Request, res: express.Response) {
    const address = req.params.address
    const currentUser = req.session!.address
    if (currentUser !== address) {
      LOG.warn('Received unauthorized BOOTY disbursement attempt', {
        from: currentUser,
        forAddress: address
      })
      return res.sendStatus(403)
    }

    let result
    try {
      const existing = await this.disbursementService.getCurrentByAddressErc20(address)
      if (existing) {
        LOG.warn('Received duplicate disbursement request', {
          from: currentUser
        })
        return res.sendStatus(400)
      }

      result = await this.disbursementService.disburseErc20(address)
    } catch (error) {
      LOG.warn(error.toString())
      return res.sendStatus(400)
    }

    res.send(result)
  }

  private setupRoutes() {
    this.router.post('/', this.doRequestDisbursement)
    this.router.get('/address/:address', this.getCurrentByAddress)
    this.router.get('/address/:address/bootyDisbursement/:id', this.doGetBootyDisbursement)
    this.router.post('/address/:address/requestBootyDisbursement', this.doRequestBootyDisbursement)
  }
}
