import {assert} from 'chai'
import * as sinon from 'sinon'
import * as express from 'express'
import {Application} from 'express'
import * as session from 'express-session'
import {MemoryStore} from 'express-session'
import {Server} from 'http'
import * as request from 'supertest'
import {Response} from 'supertest'
import ExchangeRateApiService from './ExchangeRateApiService';
import ExchangeRateDao from '../dao/ExchangeRateDao'

describe('ExchangeRateApiService', () => {
  let exchangeRate: ExchangeRateApiService

  let store: MemoryStore

  let app: Application

  let server: Server

  let rateDao = {} as ExchangeRateDao

  let originalGenerate: any

  let EXCHANGE_RATE: any

  let EXPECTED_EXCHANGE_RATE: any

  let EMPTY_EXCHANGE_RATE: any

  before((done) => {
    exchangeRate = new ExchangeRateApiService(rateDao)
    store = new MemoryStore()
    app = express()
    app.use(express.json())
    app.use(session({
      secret: 'hummus',
      name: 'cookie',
      resave: true,
      saveUninitialized: true,
      store,
      cookie: {
        secure: false,
        httpOnly: true
      }
    }))
    app.use(`/${exchangeRate.namespace}`, exchangeRate.router)
    server = app.listen(9876, done)
    originalGenerate = (store as any).generate
  })

  after((done) => {
    server.close(done)
  })

  beforeEach(() => {
    EXCHANGE_RATE = '743.32'
    EXPECTED_EXCHANGE_RATE = '743.32'
    EMPTY_EXCHANGE_RATE = 'No exchange rate found!'
  })

  describe('GET /exchangeRate', () => {
    it('should return the latest exchange rate', () => {
      rateDao.latest = sinon.stub().resolves(EXCHANGE_RATE)

      return request(app)
        .get('/exchangeRate')
        .expect(200)
        .then((res: Response) => {
          assert.deepEqual(res.text, EXPECTED_EXCHANGE_RATE)
        })
    })

    it('should return 500 if there is no exchange rate found', () => {
      rateDao.latest = sinon.stub().throws(EMPTY_EXCHANGE_RATE)

      return request(app)
        .get('/exchangeRate')
        .expect(500)
    })
  })
})
