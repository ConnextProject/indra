import * as express from 'express'
import {Application} from 'express'
import {MemoryStore} from 'express-session'
import * as sinon from 'sinon'
import * as request from 'supertest'
import {Response} from 'supertest'
import {assert} from 'chai'
import AuthApiService from './AuthApiService'
import CRAuthManager from '../CRAuthManager'
import Config from '../Config'
import {Server} from 'http'
import AuthHeaderMiddleware from '../middleware/AuthHeaderMiddleware'
import * as cookie from 'cookie-parser';

const session = require('express-session')

describe('AuthApiService', () => {
  let auth: AuthApiService

  let store: MemoryStore

  let app: Application

  let server: Server

  let crManager = {} as CRAuthManager

  let config = {} as Config

  before((done) => {
    store = new MemoryStore()

    config.authDomainWhitelist = ['google.com']
    crManager.generateNonce = sinon.stub().resolves('nonce')
    auth = new AuthApiService(crManager, store as any, config)
    app = express()
    app.use(cookie())
    app.use(new AuthHeaderMiddleware('cookie', 'hummus').middleware)
    app.use(express.json())
    app.use(session({
      secret: 'hummus',
      name: 'cookie',
      resave: true,
      saveUninitialized: true,
      store,
      cookie: {
        secure: false,
        httpOnly: true,
      },
    }))
    app.use(`/${auth.namespace}`, auth.router)
    server = app.listen(9876, done)
  })

  after((done) => {
    server.close(done)
  })

  describe('POST /auth/challenge', () => {
    it('should return a challenge on POST to /auth/challenge', () => {
      return request(app)
        .post('/auth/challenge')
        .expect(200)
        .then((res: Response) => {
          assert.strictEqual(res.body.nonce, 'nonce')
        })
    })
  })

  describe('POST /auth/response', () => {
    const REQUIRED_FIELDS = ['address', 'nonce', 'origin', 'signature']

    REQUIRED_FIELDS.forEach((f: string) => it(`should return a 400 if ${f} is not specified`, () => {
      const data = fakeData()
      delete data[f]
      return expectRequest(app, data, 400)
    }))

    it('should return a 400 if the origin is not whitelisted', () => {
      const data = fakeData()
      data.origin = 'googlefake.com'
      return expectRequest(app, data, 400)
    })

    it('should return a 400 if something bad happens while checking the signature', () => {
      const data = fakeData()
      crManager.checkSignature = sinon.stub().withArgs(data.address, data.nonce, data.origin, data.signature)
        .rejects('oh no')
      return expectRequest(app, data, 400)
    })

    it('should return a 400 if the signature is invalid', () => {
      const data = fakeData()
      crManager.checkSignature = sinon.stub().withArgs(data.address, data.nonce, data.origin, data.signature)
        .resolves(null)
      return expectRequest(app, data, 400)
    })

    it('should send back the token', () => {
      const data = fakeData()
      crManager.checkSignature = sinon.stub().withArgs(data.address, data.nonce, data.origin, data.signature)
        .resolves(data.address)
      return expectRequest(app, data, 200)
        .then((res: Response) => {
          const token = res.body.token
          assert.isString(token)
          assert.isAbove(token.length, 1)
        })
    })

    function fakeData(): any {
      return {
        address: '0x1234',
        nonce: 'nonce',
        origin: 'google.com',
        signature: '0xcabdab',
      }
    }
  })

  describe('GET /auth/status', () => {
    it('should return an unsuccessful result if no token is provided', () => {
      return request(app)
        .get('/auth/status')
        .expect(200)
        .then((res: Response) => {
          assert.strictEqual(res.body.success, false)
        })
    })

    it('should return an unsuccessful result if a malformed token is provided', () => {
      return request(app)
        .get('/auth/status')
        .set('Authorization', 'wibble')
        .expect(200)
        .then((res: Response) => {
          assert.strictEqual(res.body.success, false)
        })
    })

    it('should return the address and success if an OK token is provided', (done) => {
      const fakeSess = { cookie: { expires: Number.MAX_VALUE }, address: '0x1234' }
      store.set('wibble', new session.Session({ sessionId: 'wibble' }, fakeSess), (err: any) => {
        if (err) {
          return done(err)
        }

        return request(app)
          .get('/auth/status')
          .set('Authorization', 'Bearer wibble')
          .expect(200)
          .then((res: Response) => {
            assert.strictEqual(res.body.success, true)
            assert.strictEqual(res.body.address, '0x1234')
            done()
          })
      })
    })
  })

  function expectRequest(app: Application, data: object, expectation: number): Promise<any> {
    return request(app)
      .post('/auth/response')
      .send(data)
      .expect(expectation)
  }
})
