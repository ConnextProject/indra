import * as express from 'express'
import { ApiService, Router } from './ApiService'
import LedgerChannelService from '../LedgerChannelService'
import log from '../util/log'
import { BigNumber } from 'bignumber.js'
import Config from '../Config'
import {RedisClient} from '../RedisClient'

const LOG = log('LedgerChannelsApiService')

export default class LedgerChannelsApiService implements ApiService {
  namespace = 'ledgerchannel'

  private ledgerChannelsService: LedgerChannelService

  private config: Config

  private redis: RedisClient

  router: Router = Router()

  constructor(ledgerChannelsService: LedgerChannelService, config: Config, redis: RedisClient) {
    this.ledgerChannelsService = ledgerChannelsService
    this.config = config
    this.redis = redis

    this.doRequest = this.doRequest.bind(this)
    this.doRequestDeposit = this.doRequestDeposit.bind(this)
    this.doSignDepositUpdate = this.doSignDepositUpdate.bind(this)
    this.doFastClose = this.doFastClose.bind(this)
    this.cosign = this.cosign.bind(this)

    this.getChallenge = this.getChallenge.bind(this)
    this.getById = this.getById.bind(this)
    this.getByPartyA = this.getByPartyA.bind(this)
    this.getVcInitialStates = this.getVcInitialStates.bind(this)
    this.getLatestState = this.getLatestState.bind(this)
    this.getUpdateByNonce = this.getUpdateByNonce.bind(this)
    this.getVcs = this.getVcs.bind(this)
    this.getContractAddress = this.getContractAddress.bind(this)
    this.getUntrackedDeposits = this.getUntrackedDeposits.bind(this)
    this.getDepositStatus = this.getDepositStatus.bind(this)

    this.setupRoutes()
  }

  private async doRequest(req: express.Request, res: express.Response) {
    const { channelId } = req.params
    if (!channelId) {
      LOG.warn('Received invalid channel join request. Aborting.', {
        params: req.params,
      })
      return res.sendStatus(400)
    }

    let receipt
    try {
      receipt = await this.ledgerChannelsService.request(
        channelId,
        new BigNumber(0),
      )
    } catch (error) {
      LOG.error(
        'Error occurred in LedgerChannelsApiService.doRequest: {error}',
        { error },
      )
      return res.sendStatus(400)
    }

    res.send({ txHash: receipt.transactionHash })
  }

  private async doRequestDeposit(req: express.Request, res: express.Response) {
    let { ethDeposit, tokenDeposit } = req.body
    const { channelId } = req.params

    if (!channelId || (!ethDeposit && !tokenDeposit)) {
      LOG.warn(
        'Received invalid channel deposit request. Aborting. Params received: {params}, Body received: {body}',
        {
          params: JSON.stringify(req.params),
          body: JSON.stringify(req.body),
        },
      )
      return res.sendStatus(400)
    }

    let id
    try {
      if (!ethDeposit) {
        ethDeposit = 0
      }
      if (!tokenDeposit) {
        tokenDeposit = 0
      }
      id = await this.ledgerChannelsService.depositNonBlocking(
        channelId,
        new BigNumber(ethDeposit),
        new BigNumber(tokenDeposit),
      )
    } catch (error) {
      LOG.error(
        'Error occurred in LedgerChannelsApiService.doRequestDeposit: {error}',
        { error },
      )
      return res.sendStatus(400)
    }

    res.send({
      txHash: id
    })
  }

  private async getDepositStatus (req: express.Request, res: express.Response) {
    try {
      const status = await this.ledgerChannelsService.getDepositState(req.params.id)
      if (!status) {
        return res.send(400)
      }

      return res.send({
        status: status
      })
    } catch (err) {
      LOG.error('Failed to fetch deposit status: {err}', {
        err
      })
      return res.sendStatus(500)
    }
  }

  private async doSignDepositUpdate(
    req: express.Request,
    res: express.Response,
  ) {
    const { deposit, isToken, sig, depositId } = req.body
    const { channelId } = req.params

    if (!channelId || !deposit || !sig || !depositId) {
      LOG.warn(
        'Received invalid sign deposit request. Aborting. Body received: {body}',
        {
          body: req.body,
        },
      )
      return res.sendStatus(400)
    }

    let update
    try {
      update = await this.ledgerChannelsService.signDepositUpdate(
        channelId,
        new BigNumber(deposit),
        isToken,
        sig,
        depositId,
      )
    } catch (error) {
      LOG.error(
        'Error occurred in LedgerChannelsApiService.doSignDepositUpdate: {error}',
        { error: error.toString() },
      )
      return res.sendStatus(400)
    }

    res.send(update)
  }

  private async cosign(req: express.Request, res: express.Response) {
    const { channelId, nonce } = req.params
    const { sig } = req.body
    if (!channelId || !nonce || !sig) {
      LOG.warn(
        'Received invalid cosign state update request. Aborting. Params received: {params}, Body received: {body}',
        {
          params: req.params,
          body: req.body,
        },
      )
      return res.sendStatus(400)
    }

    let update
    try {
      update = await this.ledgerChannelsService.cosign(channelId, nonce, sig)
    } catch (error) {
      LOG.error('Error occurred in LedgerChannelsApiService.cosign: {error}', {
        error,
      })
      return res.sendStatus(400)
    }
    res.send(update)
  }

  private async doFastClose(req: express.Request, res: express.Response) {
    const { channelId } = req.params
    const { sig } = req.body
    if (!channelId || !sig) {
      LOG.warn(
        'Received invalid channel fast close request. Aborting. Params received: {params}, Body received: {body}',
        {
          params: req.params,
          body: req.body,
        },
      )
      return res.sendStatus(400)
    }
    let update
    try {
      update = await this.ledgerChannelsService.doFastClose(channelId, sig)
    } catch (error) {
      LOG.error(
        'Error occurred in LedgerChannelsApiService.doFastClose: {error}',
        { error },
      )
      return res.sendStatus(400)
    }
    res.send(update)
  }

  private async getChallenge(req: express.Request, res: express.Response) {
    res.send({ challenge: this.config.ledgerChannelChallenge })
  }

  private async getById(req: express.Request, res: express.Response) {
    const { channelId } = req.params
    if (!channelId) {
      LOG.warn('Received invalid channel get request. Aborting.', {
        params: req.params,
      })
      return res.sendStatus(400)
    }

    let channel
    try {
      channel = await this.ledgerChannelsService.getById(channelId)
    } catch (error) {
      LOG.error('Error occurred in LedgerChannelsApiService.getById: {error}', {
        error,
      })
      return res.sendStatus(400)
    }

    if (!channel) {
      return res.sendStatus(404)
    }

    res.send(channel)
  }

  private async getLatestState(req: express.Request, res: express.Response) {
    const { channelId } = req.params
    const { sig } = req.query
    if (!channelId) {
      LOG.warn(
        'Received invalid channel get latest state update request. Aborting. Body received: {body}',
        {
          body: req.body,
        },
      )
      return res.sendStatus(400)
    }
    let update
    try {
      update = await this.ledgerChannelsService.getLatestStateUpdate(
        channelId,
        sig ? sig.indexOf('sigA') !== -1 : false,
        sig ? sig.indexOf('sigI') !== -1 : false,
      )
    } catch (error) {
      LOG.error(
        'Error occurred in LedgerChannelsApiService.getLatestState: {error}',
        { error },
      )
      return res.sendStatus(400)
    }

    if (!update) {
      return res.sendStatus(204)
    }

    res.send(update)
  }

  private async getUpdateByNonce(req: express.Request, res: express.Response) {
    const { channelId, nonce } = req.params
    if (!channelId || !nonce) {
      LOG.warn(
        'Received invalid get state update request. Aborting. Params received: {params}',
        {
          params: req.params,
        },
      )
      return res.sendStatus(400)
    }
    let update
    try {
      update = await this.ledgerChannelsService.getStateUpdateByNonce(
        channelId,
        nonce,
      )
      if (!update) {
        return res.sendStatus(404)
      }
    } catch (error) {
      LOG.error(
        'Error occurred in LedgerChannelsApiService.doRequest: {error}',
        { error },
      )
      return res.sendStatus(400)
    }

    if (!update) {
      return res.sendStatus(204)
    }

    res.send(update)
  }

  private async getByPartyA(req: express.Request, res: express.Response) {
    const { partyA } = req.params
    const { status } = req.query

    if (!partyA || !status) {
      LOG.warn(
        'Received invalid channel get request. Aborting. Params received: {params}, Query received: {query}',
        {
          params: req.params,
          query: req.query,
        },
      )
      return res.sendStatus(400)
    }

    let channel

    try {
      channel = await this.ledgerChannelsService.getByPartyAAndStatus(
        partyA,
        status,
      )
    } catch (err) {
      LOG.error(
        'Error occurred in LedgerChannelsApiService.getByPartyA: {err}',
        { err },
      )
      return res.sendStatus(400)
    }

    if (!channel) {
      return res.sendStatus(404)
    }

    res.send(channel)
  }

  private async getUntrackedDeposits(
    req: express.Request,
    res: express.Response,
  ) {
    const { channelId } = req.params

    if (!channelId) {
      LOG.warn(
        'Received invalid channel get request. Aborting. Params received: {params}',
        {
          params: req.params,
        },
      )
      return res.sendStatus(400)
    }

    let deposits

    try {
      deposits = await this.ledgerChannelsService.getUntrackedDepositsForPartyA(
        channelId,
      )
    } catch (err) {
      LOG.error(
        'Error occurred in LedgerChannelsApiService.getUntrackedDeposits: {err}, stack: {stack}',
        { err: err.toString(), stack: err.stack },
      )
      return res.sendStatus(400)
    }

    res.send(deposits)
  }

  private async getVcInitialStates(
    req: express.Request,
    res: express.Response,
  ) {
    const { channelId } = req.params
    if (!channelId) {
      LOG.warn('Received invalid channel get request. Aborting.', {
        params: req.params,
      })
      return res.sendStatus(400)
    }

    let states
    try {
      states = await this.ledgerChannelsService.getVcInitialStates(channelId)
    } catch (error) {
      LOG.error(
        'Error occurred in LedgerChannelsApiService.getVcInitialStates: {error}',
        { error },
      )
      return res.sendStatus(400)
    }
    res.send(states)
  }

  private async getVcs(req: express.Request, res: express.Response) {
    const { channelId } = req.params
    if (!channelId) {
      LOG.warn('Received invalid channel get request. Aborting.', {
        params: req.params,
      })
      return res.sendStatus(400)
    }

    let vcs
    try {
      vcs = await this.ledgerChannelsService.getVcs(channelId)
    } catch (error) {
      LOG.error('Error occurred in LedgerChannelsApiService.getVcs: {error}', {
        error,
      })
      return res.sendStatus(400)
    }
    res.send(vcs)
  }

  private async getContractAddress(
    req: express.Request,
    res: express.Response,
  ) {
    const { channelId } = req.params
    if (!channelId) {
      LOG.warn('Received invalid channel get request. Aborting.', {
        params: req.params,
      })
      return res.sendStatus(400)
    }

    let addr
    try {
      addr = await this.ledgerChannelsService.getContractAddress(channelId)
    } catch (error) {
      LOG.error(
        'Error occurred in LedgerChannelsApiService.getContractAddress: {error}',
        {
          error,
        },
      )
      return res.sendStatus(400)
    }
    res.send({ address: addr })
  }

  private setupRoutes() {
    this.router.post('/:channelId/request', this.doRequest)
    this.router.post('/:channelId/requestdeposit', this.doRequestDeposit)
    this.router.post('/:channelId/deposit', this.doSignDepositUpdate)
    this.router.post('/:channelId/fastclose', this.doFastClose)
    this.router.post('/:channelId/update/:nonce/cosign', this.cosign)

    this.router.get('/challenge', this.getChallenge)
    this.router.get('/:channelId', this.getById)
    this.router.get('/a/:partyA', this.getByPartyA)
    this.router.get('/:channelId/vcinitialstates', this.getVcInitialStates)
    this.router.get('/:channelId/vcs', this.getVcs)
    this.router.get('/:channelId/update/latest', this.getLatestState)
    this.router.get('/:channelId/update/nonce/:nonce', this.getUpdateByNonce)
    this.router.get('/:channelId/contract', this.getContractAddress)
    this.router.get('/:channelId/untrackeddeposits', this.getUntrackedDeposits)
    this.router.get('/:channelId/depositstatus/:id', this.getDepositStatus)
  }
}
