import { assert } from 'chai'
import DBEngine, { PostgresDBEngine } from './DBEngine'
import { Client } from 'pg'
import {
  PostgresLedgerChannelsDao,
  UpdateReason,
} from './dao/LedgerChannelsDao'
import Config from './Config'
import eraseDb from './testing/eraseDb'
import { PostgresVirtualChannelsDao } from './dao/VirtualChannelsDao'
import { PostgresChainsawLcDao, LcStatus } from './dao/ChainsawLcDao'
import LedgerChannelsService from './LedgerChannelService'
import { BigNumber } from 'bignumber.js'
import crypto = require('crypto')
import Web3 from 'web3'
import abi from './contract/channelManagerAbi'
import { LcStateUpdateDto } from './domain/LedgerChannel'
import DepositCorrelateService from './DepositCorrelateService'
let func = process.env.DATABASE_URL_TEST ? describe : xdescribe
const tokenAbi = require('human-standard-token-abi')

func('DepositCorrelateService', () => {
  let client: DBEngine<Client>

  let postgresLedgerChannelsDao: PostgresLedgerChannelsDao
  let chainsawDao: PostgresChainsawLcDao
  let depositService: DepositCorrelateService

  before(() => {
    client = new PostgresDBEngine({
      databaseUrl: process.env.DATABASE_URL_TEST,
    } as Config)
    postgresLedgerChannelsDao = new PostgresLedgerChannelsDao(client)
    chainsawDao = new PostgresChainsawLcDao(client)
    depositService = new DepositCorrelateService(
      postgresLedgerChannelsDao,
      chainsawDao,
    )
    return client.connect()
  })

  after(() => {
    return client.disconnect()
  })

  beforeEach(async () => {
    await eraseDb(client)
    postgresLedgerChannelsDao = new PostgresLedgerChannelsDao(client)
    chainsawDao = new PostgresChainsawLcDao(client)
    depositService = new DepositCorrelateService(
      postgresLedgerChannelsDao,
      chainsawDao,
    )
  })

  afterEach(async () => {
    await eraseDb(client)
  })

  describe('get untracked deposit', () => {
    beforeEach(() => {
      return client.exec(async (c: Client) =>
        c.query(`
            INSERT INTO chainsaw_channel_events (id, contract, channel_id, ts, block_number, block_hash, is_valid_block, sender, event_type, fields)
            VALUES(
            1,
            '0xfa3969f9dae19af76275bdcfb0748c836cd46fb2',
            '0x6635303034316638353961653461376539613761653465306334383561343131',
            1,
            1,
            '0x66353030343166383539616534613765396137616534653063343835613431d1',
            true,
            '0x821aea9a577a9b44299b9c15c88cf3087f3b5544',
            'DidLCOpen',
            '{"ethBalanceA": 1, "tokenBalanceA": 0, "token": "0x0000000000000000000000000000000000000000", "LCopenTimeout": 0}'::json
            );

            INSERT INTO chainsaw_channel_events (id, contract, channel_id, ts, block_number, block_hash, is_valid_block, sender, event_type, fields)
            VALUES(
            2,
            '0xfa3969f9dae19af76275bdcfb0748c836cd46fb2',
            '0x6635303034316638353961653461376539613761653465306334383561343131',
            2,
            2,
            '0x66353030343166383539616534613765396137616534653063343835613431d1',
            true,
            '0x2191ef87e392377ec08e7c08eb105ef5448eced5',
            'DidLCJoin',
            '{"ethBalanceI": 1, "tokenBalanceI": 0}'::json
            );

            INSERT INTO chainsaw_channel_events (id, contract, channel_id, ts, block_number, block_hash, is_valid_block, sender, event_type, fields)
            VALUES(
            3,
            '0xfa3969f9dae19af76275bdcfb0748c836cd46fb2',
            '0x6635303034316638353961653461376539613761653465306334383561343131',
            2,
            2,
            '0x66353030343166383539616534613765396137616534653063343835613431d1',
            true,
            '0x2191ef87e392377ec08e7c08eb105ef5448eced5',
            'DidLCDeposit',
            '{"recipient": "0x821aea9a577a9b44299b9c15c88cf3087f3b5544", "deposit": 10, "isToken": false}'::json
            );

            INSERT INTO chainsaw_channel_events (id, contract, channel_id, ts, block_number, block_hash, is_valid_block, sender, event_type, fields)
            VALUES(
            4,
            '0xfa3969f9dae19af76275bdcfb0748c836cd46fb2',
            '0x6635303034316638353961653461376539613761653465306334383561343131',
            2,
            2,
            '0x66353030343166383539616534613765396137616534653063343835613431d1',
            true,
            '0x2191ef87e392377ec08e7c08eb105ef5448eced5',
            'DidLCDeposit',
            '{"recipient": "0x821aea9a577a9b44299b9c15c88cf3087f3b5544", "deposit": 20, "isToken": false}'::json
            );

            INSERT INTO chainsaw_channel_events (id, contract, channel_id, ts, block_number, block_hash, is_valid_block, sender, event_type, fields)
            VALUES(
            5,
            '0xfa3969f9dae19af76275bdcfb0748c836cd46fb2',
            '0x6635303034316638353961653461376539613761653465306334383561343131',
            2,
            2,
            '0x66353030343166383539616534613765396137616534653063343835613431d1',
            true,
            '0x2191ef87e392377ec08e7c08eb105ef5448eced5',
            'DidLCDeposit',
            '{"recipient": "0x821aea9a577a9b44299b9c15c88cf3087f3b5544", "deposit": 10, "isToken": false}'::json
            );

            INSERT INTO chainsaw_channel_events (id, contract, channel_id, ts, block_number, block_hash, is_valid_block, sender, event_type, fields)
            VALUES(
            6,
            '0xfa3969f9dae19af76275bdcfb0748c836cd46fb2',
            '0x6635303034316638353961653461376539613761653465306334383561343131',
            2,
            2,
            '0x66353030343166383539616534613765396137616534653063343835613431d1',
            true,
            '0x2191ef87e392377ec08e7c08eb105ef5448eced5',
            'DidLCDeposit',
            '{"recipient": "0x821aea9a577a9b44299b9c15c88cf3087f3b5544", "deposit": 10, "isToken": false}'::json
            );

            INSERT INTO chainsaw_channel_events (id, contract, channel_id, ts, block_number, block_hash, is_valid_block, sender, event_type, fields)
            VALUES(
            7,
            '0xfa3969f9dae19af76275bdcfb0748c836cd46fb2',
            '0x6635303034316638353961653461376539613761653465306334383561343131',
            2,
            2,
            '0x66353030343166383539616534613765396137616534653063343835613431d1',
            true,
            '0x2191ef87e392377ec08e7c08eb105ef5448eced5',
            'DidLCDeposit',
            '{"recipient": "0x821aea9a577a9b44299b9c15c88cf3087f3b5544", "deposit": 30, "isToken": false}'::json
            );

            INSERT INTO exchange_rates("id","retrievedat","base","rate_usd") VALUES (1, ${Date.now()}, 'ETH', 1);
          `),
      )
    })

    it('returns no items when all deposits are accounted for and correlates deposits', async () => {
      const channelId =
        '0x6635303034316638353961653461376539613761653465306334383561343131'

      const vcRootHash = await createRandomBytes32()

      // insert state updates for all deposits
      // deposit for 10
      let stateUpdate: LcStateUpdateDto = {
        nonce: 0,
        ethBalanceA: new BigNumber(10),
        ethBalanceI: new BigNumber(0),
        isClose: false,
        openVcs: 0,
        tokenBalanceA: new BigNumber(0),
        tokenBalanceI: new BigNumber(0),
        vcRootHash,
        reason: UpdateReason.LcDeposit,
      }
      await postgresLedgerChannelsDao.createStateUpdate(channelId, stateUpdate)

      // deposit for 20
      stateUpdate = {
        nonce: 1,
        ethBalanceA: new BigNumber(30),
        ethBalanceI: new BigNumber(0),
        isClose: false,
        openVcs: 0,
        tokenBalanceA: new BigNumber(0),
        tokenBalanceI: new BigNumber(0),
        vcRootHash,
        reason: UpdateReason.LcDeposit,
      }
      await postgresLedgerChannelsDao.createStateUpdate(channelId, stateUpdate)

      // deposit for 10
      stateUpdate = {
        nonce: 2,
        ethBalanceA: new BigNumber(40),
        ethBalanceI: new BigNumber(0),
        isClose: false,
        openVcs: 0,
        tokenBalanceA: new BigNumber(0),
        tokenBalanceI: new BigNumber(0),
        vcRootHash,
        reason: UpdateReason.LcDeposit,
      }
      await postgresLedgerChannelsDao.createStateUpdate(channelId, stateUpdate)

      // deposit for 10
      stateUpdate = {
        nonce: 3,
        ethBalanceA: new BigNumber(50),
        ethBalanceI: new BigNumber(0),
        isClose: false,
        openVcs: 0,
        tokenBalanceA: new BigNumber(0),
        tokenBalanceI: new BigNumber(0),
        vcRootHash,
        reason: UpdateReason.LcDeposit,
      }
      await postgresLedgerChannelsDao.createStateUpdate(channelId, stateUpdate)

      // deposit for 30
      stateUpdate = {
        nonce: 4,
        ethBalanceA: new BigNumber(80),
        ethBalanceI: new BigNumber(0),
        isClose: false,
        openVcs: 0,
        tokenBalanceA: new BigNumber(0),
        tokenBalanceI: new BigNumber(0),
        vcRootHash,
        reason: UpdateReason.LcDeposit,
      }
      await postgresLedgerChannelsDao.createStateUpdate(channelId, stateUpdate)

      let deposits = await chainsawDao.ledgerChannelDepositsByChannelId(
        channelId,
      )
      deposits.forEach(d => assert.isNull(d.updateId))

      const untrackedDeposits = await depositService.correlateDeposits()

      deposits = await chainsawDao.ledgerChannelDepositsByChannelId(channelId)
      deposits.forEach(d => assert.isNotNull(d.updateId))

      assert.deepEqual(untrackedDeposits, [])
    })

    it('returns an unaccounted for deposit', async () => {
      const channelId =
        '0x6635303034316638353961653461376539613761653465306334383561343131'

      const vcRootHash = await createRandomBytes32()

      // insert state updates for all deposits
      // deposit for 10
      let stateUpdate: LcStateUpdateDto = {
        nonce: 0,
        ethBalanceA: new BigNumber(10),
        ethBalanceI: new BigNumber(0),
        isClose: false,
        openVcs: 0,
        tokenBalanceA: new BigNumber(0),
        tokenBalanceI: new BigNumber(0),
        vcRootHash,
        reason: UpdateReason.LcDeposit,
      }
      await postgresLedgerChannelsDao.createStateUpdate(channelId, stateUpdate)

      // deposit for 20
      stateUpdate = {
        nonce: 1,
        ethBalanceA: new BigNumber(30),
        ethBalanceI: new BigNumber(0),
        isClose: false,
        openVcs: 0,
        tokenBalanceA: new BigNumber(0),
        tokenBalanceI: new BigNumber(0),
        vcRootHash,
        reason: UpdateReason.LcDeposit,
      }
      await postgresLedgerChannelsDao.createStateUpdate(channelId, stateUpdate)

      // deposit for 10
      stateUpdate = {
        nonce: 3,
        ethBalanceA: new BigNumber(40),
        ethBalanceI: new BigNumber(0),
        isClose: false,
        openVcs: 0,
        tokenBalanceA: new BigNumber(0),
        tokenBalanceI: new BigNumber(0),
        vcRootHash,
        reason: UpdateReason.LcDeposit,
      }
      await postgresLedgerChannelsDao.createStateUpdate(channelId, stateUpdate)

      // deposit for 30
      stateUpdate = {
        nonce: 4,
        ethBalanceA: new BigNumber(70),
        ethBalanceI: new BigNumber(0),
        isClose: false,
        openVcs: 0,
        tokenBalanceA: new BigNumber(0),
        tokenBalanceI: new BigNumber(0),
        vcRootHash,
        reason: UpdateReason.LcDeposit,
      }
      await postgresLedgerChannelsDao.createStateUpdate(channelId, stateUpdate)

      const untrackedDeposits = await depositService.correlateDeposits()

      assert.equal(untrackedDeposits.length, 1)
      assert.equal(untrackedDeposits[0].deposit.toNumber(), 10)
    })
  })
})

async function createRandomBytes32(): Promise<any> {
  return new Promise((resolve, reject) => {
    crypto.randomBytes(32, (err, buf) => {
      if (err) reject(err)
      resolve(`0x${buf.toString('hex')}`)
    })
  })
}

async function createRandomBytes65(): Promise<any> {
  return new Promise((resolve, reject) => {
    crypto.randomBytes(65, (err, buf) => {
      if (err) reject(err)
      resolve(`0x${buf.toString('hex')}`)
    })
  })
}
