import { getTestRegistry, assert } from "./testing";
import PaymentsService from "./PaymentsService";
import { PurchasePayment, UpdateRequest, PaymentArgs, convertChannelState, convertPayment } from "./vendor/connext/types";
import { mkAddress, mkSig, assertChannelStateEqual } from "./testing/stateUtils";
import { channelUpdateFactory, tokenVal } from "./testing/factories";
import { MockSignerService } from "./testing/mocks";
import ChannelsService from "./ChannelsService";
import { StateGenerator } from "./vendor/connext/StateGenerator";

describe('PaymentsService', () => {
  const registry = getTestRegistry({
    SignerService: new MockSignerService()
  })

  const service: PaymentsService = registry.get('PaymentsService')
  const channelsService: ChannelsService = registry.get('ChannelsService')
  const stateGenerator: StateGenerator = registry.get('StateGenerator')

  beforeEach(async () => {
    await registry.clearDatabase()
  })

  it('should create a custodial payment', async () => {
    const sender = mkAddress('0xa')
    const receiver = mkAddress('0xb')

    const senderChannel = await channelUpdateFactory(registry, { user: sender, balanceTokenUser: tokenVal(5) })
    const receiverChannel = await channelUpdateFactory(registry, { user: receiver, balanceTokenHub: tokenVal(6) })

    const paymentArgs: PaymentArgs = {
      amountWei: '0',
      amountToken: tokenVal(1),
      recipient: 'hub'
    }
    const payments: PurchasePayment[] = [
      {
        recipient: receiver,
        amount: {
          amountWei: '0',
          amountToken: tokenVal(1),
        },
        meta: {},
        type: 'PT_CHANNEL',
        update: {
          reason: 'Payment',
          sigUser: mkSig('0xa'),
          txCount: senderChannel.state.txCountGlobal + 1,
          args: paymentArgs,
        } as UpdateRequest,
      }
    ]

    await service.doPurchase(sender, payments)
    const senderUpdates = await channelsService.getChannelAndThreadUpdatesForSync(sender, 0, 0)
    const custodialUpdateSender = senderUpdates[senderUpdates.length - 1]

    assert.equal((custodialUpdateSender.state as UpdateRequest).reason, 'Payment')
    let generated = stateGenerator.channelPayment(convertChannelState('bn', senderChannel.state), convertPayment('bn', paymentArgs))
    assertChannelStateEqual(generated, {
      balanceTokenUser: tokenVal(4),
      balanceTokenHub: tokenVal(1)
    })

    const receiverUpdates = await channelsService.getChannelAndThreadUpdatesForSync(sender, 0, 0)
    const custodialUpdateReceiver = receiverUpdates[receiverUpdates.length - 1]

    assert.equal((custodialUpdateReceiver.state as UpdateRequest).reason, 'Payment')
    generated = stateGenerator.channelPayment(convertChannelState('bn', receiverChannel.state), convertPayment('bn', {...paymentArgs, recipient: 'user'}))
    assertChannelStateEqual(generated, {
      balanceTokenUser: tokenVal(1),
      balanceTokenHub: tokenVal(5)
    })
  })
})