import {assert} from 'chai'
import DBEngine, {PostgresDBEngine} from '../DBEngine'
import {Client} from 'pg'
import Config from '../Config'
import {PostgresWithdrawalsDao} from './WithdrawalsDao'
import eraseDb from '../testing/eraseDb'
import {WithdrawalStatus} from '../domain/Withdrawal'
import * as BigNumber from 'bignumber.js'

let func = process.env.DATABASE_URL_TEST ? describe : xdescribe

func('PostgresWithdrawalsDao', () => {
  let client: DBEngine<Client>

  let dao: PostgresWithdrawalsDao

  before(() => {
    client = new PostgresDBEngine({
      databaseUrl: process.env.DATABASE_URL_TEST
    } as Config)

    return client.connect()
  })

  after(() => {
    return client.disconnect()
  })

  beforeEach(async () => {
    await eraseDb(client)
    dao = new PostgresWithdrawalsDao(client)
  })

  afterEach(async () => {
    await eraseDb(client)
  })

  describe('createChannelDisbursement', () => {
    beforeEach(async () => {
      await client.exec(async (c: Client) => c.query(`
        INSERT INTO exchange_rates (id, retrievedat, base, rate_usd) VALUES (1, now_millis() - 3, 'ETH', '100.00');
      `))
    })

    it('should create the correct withdrawal record', async () => {
      const wd = await dao.createChannelDisbursement('0xbeef', '0xcafe', new BigNumber.BigNumber('100000000000000000000'))
      assert.isNotNull(wd)
      assert.containSubset(wd, {
        id: 1,
        initiator: '0xbeef',
        recipient: '0xcafe',
        amountWei: new BigNumber.BigNumber('100000000000000000000'),
        amountUsd: new BigNumber.BigNumber('10000'),
        txhash: null,
        status: WithdrawalStatus.NEW,
        confirmedAt: null,
        failedAt: null,
      })
      assert.isNumber(wd!.createdAt)
    })
  })

  describe('totalFor', () => {
    beforeEach(async () => {
      await client.exec(async (c: Client) => c.query(`
        INSERT INTO exchange_rates (id, retrievedat, base, rate_usd) VALUES (1, now_millis() - 3, 'ETH', '100.00');
        INSERT INTO withdrawals (id, recipient, initiator, amountusd, amountwei, status, createdat, exchange_rate_id, method) VALUES(1, '0xbeef', '0xbeef', '100.00', 10000, 'CONFIRMED', 1, 1, 'PEGGED_FIAT');
        INSERT INTO withdrawals (id, recipient, initiator, amountusd, amountwei, status, createdat, exchange_rate_id, method) VALUES(2, '0xbeef', '0xbeef', '100.00', 10000, 'CONFIRMED', 1, 1, 'WEI_SUM');
        INSERT INTO withdrawals (id, recipient, initiator, amountusd, amountwei, status, createdat, exchange_rate_id, method) VALUES(3, '0xbeef', '0xbeef', '101.00', 10000, 'PENDING', 1, 1, 'PEGGED_FIAT');
        INSERT INTO withdrawals (id, recipient, initiator, amountusd, amountwei, status, createdat, exchange_rate_id, method) VALUES(4, '0xbeef', '0xbeef', '102.00', 10000, 'FAILED', 1, 1, 'WEI_SUM');
        INSERT INTO withdrawals (id, recipient, initiator, amountusd, amountwei, status, createdat, exchange_rate_id, method) VALUES(5, '0xbab', '0xbeef', '102.00', 10000, 'FAILED', 1, 1, 'PEGGED_FIAT');
      `))
    });

    it('should return correct totals for confirmed records', async () => {
      const totals = await dao.totalFor('0xbeef', WithdrawalStatus.CONFIRMED)
      assert.strictEqual(totals.totalUsd.toString(), '200')
      assert.strictEqual(totals.totalWei.toString(), '20000')
    })

    it('should return correct totals for pending records', async () => {
      const totals = await dao.totalFor('0xbeef', WithdrawalStatus.PENDING)
      assert.strictEqual(totals.totalUsd.toString(), '101')
      assert.strictEqual(totals.totalWei.toString(), '10000')
    })

    it('should return correct totals for failed records', async () => {
      const totals = await dao.totalFor('0xbeef', WithdrawalStatus.FAILED)
      assert.strictEqual(totals.totalUsd.toString(), '102')
      assert.strictEqual(totals.totalWei.toString(), '10000')
    })

    it('should return zeroes if no rows are found', async () => {
      const totals = await dao.totalFor('0xbab', WithdrawalStatus.CONFIRMED)
      assert.strictEqual(totals.totalUsd.toString(), '0')
      assert.strictEqual(totals.totalWei.toString(), '0')
    })
  })
})
