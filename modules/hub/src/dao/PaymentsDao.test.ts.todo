import { assert } from 'chai'
import DBEngine, { PostgresDBEngine } from '../DBEngine'
import { Client } from 'pg'
import { PostgresPaymentsDao } from './PaymentsDao'
import Config from '../Config'
import eraseDb from '../testing/eraseDb'

let func = process.env.DATABASE_URL_TEST ? describe : xdescribe

func('PaymentsDao', () => {
  let client: DBEngine<Client>

  let dao: PostgresPaymentsDao

  before(() => {
    client = new PostgresDBEngine({
      databaseUrl: process.env.DATABASE_URL_TEST,
    } as Config)

    return client.connect()
  })

  after(() => {
    return client.disconnect()
  })

  beforeEach(async () => {
    await eraseDb(client)
    dao = new PostgresPaymentsDao(client, {
      staleChannelDays: 2,
    } as Config)
  })

  afterEach(async () => {
    await eraseDb(client)
  })

  describe('totalAvailableFor', () => {
    beforeEach(() => {
      return client.exec((c: Client) =>
        c.query(`
        INSERT INTO channel ("channelId", kind, sender, receiver, value, spent, state)
          VALUES ('0xcabdab', 'shared:channel', '0x123', '0xabc', 10000000000000000, 0, 0);
        INSERT INTO exchange_rates (id, retrievedat, base, rate_usd) VALUES (1, now_millis() - 3, 'ETH', '100.00');
        INSERT INTO payment ("channelId", kind, token, sender, receiver, price, value, "channelValue", v, r, s, meta, withdrawal_id)
          VALUES ('0xcabdab', 'shared:payment', '123-abc-1', '0x123', '0xabc', 1000000000000000, 1000000000000000, 10000000000000000, 12, '0xb', '0xc', '', NULL);
        INSERT INTO payment_meta (paymenttoken, purchase, receiver, type) VALUES ('123-abc-1', 'p1', '0xbb1699d16368ebc13bdc29e6a1aad50a21be45eb', 'TIP');
        INSERT INTO exchange_rates (id, retrievedat, base, rate_usd) VALUES (2, now_millis() - 2, 'ETH', '200.00');
        INSERT INTO payment ("channelId", kind, token, sender, receiver, price, value, "channelValue", v, r, s, meta, withdrawal_id)
          VALUES ('0xcabdab', 'shared:payment', '123-abc-2', '0x123', '0xabc', 1000000000000000, 2000000000000000, 10000000000000000, 12, '0xb', '0xc', '', NULL);
        INSERT INTO payment_meta (paymenttoken, purchase, receiver, type) VALUES ('123-abc-2', 'p2', '0xbb1699d16368ebc13bdc29e6a1aad50a21be45eb', 'TIP');
        INSERT INTO exchange_rates (id, retrievedat, base, rate_usd) VALUES (3, now_millis() - 1, 'ETH', '500.00');
        INSERT INTO payment ("channelId", kind, token, sender, receiver, price, value, "channelValue", v, r, s, meta, withdrawal_id)
          VALUES ('0xcabdab', 'shared:payment', '123-abc-3', '0x123', '0xabc', 1000000000000000, 3000000000000000, 10000000000000000, 12, '0xb', '0xc', '', NULL);
        INSERT INTO payment_meta (paymenttoken, purchase, receiver, type) VALUES ('123-abc-3', 'p3', '0xbb1699d16368ebc13bdc29e6a1aad50a21be45eb', 'TIP');
      `),
      )
    })

    it('should return the correct total wei and USD numbers', async () => {
      const res = await dao.totalAvailableFor(
        '0xbb1699d16368ebc13bdc29e6a1aad50a21be45eb',
      )

      assert.strictEqual(res.totalWei.toString(), '3000000000000000')
      assert.strictEqual(res.totalUsd.toString(), '0.8')
    })

    it('should return zeroes for users with no withdrawals yet', async () => {
      const res = await dao.totalAvailableFor(
        '0x6ef57be1168628a2bd6c5788322a41265084408a',
      )

      assert.strictEqual(res.totalWei.toString(), '0')
      assert.strictEqual(res.totalUsd.toString(), '0')
    })
  })

  describe('staleChannels', () => {
    beforeEach(() => {
      // 172800000 is 2 days in millis
      return client.exec((c: Client) =>
        c.query(`
        INSERT INTO channel ("channelId", kind, sender, receiver, value, spent, state)
          VALUES ('0xcabdab', 'shared:channel', '0x123', '0xabc', 10000000000000000, 0, 0);
        INSERT INTO channel ("channelId", kind, sender, receiver, value, spent, state)
          VALUES ('0xcafe', 'shared:channel', '0x123', '0xabc', 10000000000000000, 0, 0);
        INSERT INTO exchange_rates (id, retrievedat, base, rate_usd) VALUES (1, now_millis() - 3, 'ETH', '100.00');
        INSERT INTO payment ("channelId", kind, token, sender, receiver, price, value, "channelValue", v, r, s, meta, withdrawal_id, "createdAt")
          VALUES ('0xcabdab', 'shared:payment', '123-abc-1', '0x123', '0xabc', 1000000000000000, 1000000000000000, 10000000000000000, 12, '0xb', '0xc', '', NULL, now_millis() - 3);
        INSERT INTO payment_meta (paymenttoken, purchase, receiver, type) VALUES ('123-abc-1', 'p1', '0x6ef57be1168628a2bd6c5788322a41265084408a', 'TIP');
        INSERT INTO exchange_rates (id, retrievedat, base, rate_usd) VALUES (2, now_millis() - 2, 'ETH', '200.00');
        INSERT INTO payment ("channelId", kind, token, sender, receiver, price, value, "channelValue", v, r, s, meta, withdrawal_id, "createdAt")
          VALUES ('0xcabdab', 'shared:payment', '123-abc-2', '0x123', '0xabc', 1000000000000000, 2000000000000000, 10000000000000000, 12, '0xb', '0xc', '', NULL, now_millis() - 3);
        INSERT INTO payment_meta (paymenttoken, purchase, receiver, type) VALUES ('123-abc-2', 'p2', '0x6ef57be1168628a2bd6c5788322a41265084408a', 'BUY');
        INSERT INTO exchange_rates (id, retrievedat, base, rate_usd) VALUES (3, now_millis() - 172800001, 'ETH', '500.00');
        INSERT INTO payment ("channelId", kind, token, sender, receiver, price, value, "channelValue", v, r, s, meta, withdrawal_id, "createdAt")
          VALUES ('0xcafe', 'shared:payment', '123-abc-3', '0x123', '0xabc', 1000000000000000, 1000000000000000, 10000000000000000, 12, '0xb', '0xc', '', NULL, now_millis() - 172800001);
        INSERT INTO payment_meta (paymenttoken, purchase, receiver, type) VALUES ('123-abc-3', 'p3', '0x6ef57be1168628a2bd6c5788322a41265084408a', 'TIP');
      `),
      )
    })

    it.skip('should return any channels that are more than staleChannelDays old', async () => {
      const res = await dao.staleChannels()

      assert.strictEqual(res.length, 1)
      assert.strictEqual(res[0].channelId, '0xcafe')
    })
  })
})
