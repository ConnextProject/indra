import * as chai from 'chai'
import { assert } from 'chai'
//import * as sinon from 'sinon'
import DBEngine, { PostgresDBEngine } from '../DBEngine'
import { Client } from 'pg'
import Config from '../Config'
import eraseDb from '../testing/eraseDb'
import * as chaiAsPromised from 'chai-as-promised'
import  DisbursementsDao, { PostgresDisbursementDao } from './DisbursementsDao'
import DisbursementService from '../DisbursementService';
import * as Web3 from 'web3'
let func = process.env.DATABASE_URL_TEST ? describe : xdescribe

func('DisbursementsDao', () => {
  let engine: DBEngine<Client>

  let dao: DisbursementsDao
  let service: DisbursementService
  //let sandbox: sinon.SinonSandbox
  let web3: any
  let accounts: any = ['0x58e95845a3c2740f4b1b4c639a75ada64ef0b72f']


  before(() => {
    chai.use(chaiAsPromised)
    engine = new PostgresDBEngine({
      databaseUrl: process.env.DATABASE_URL_TEST,
    } as Config)

    return engine.connect()
  })

  after(async () => {
    return engine.disconnect()
  })

  beforeEach(async () => {
    await eraseDb(engine)
    web3 = new Web3(new Web3.providers.HttpProvider(process.env.ETH_RPC_URL))
    dao = new PostgresDisbursementDao(engine)
    service = new DisbursementService(
      dao,
      web3,
      { hotWalletAddress: accounts[0] } as Config
    )
  })

  afterEach(async () => {
    await eraseDb(engine)
  })

  describe('Handle BOOTY disbursement', () => {
    it('Request disbursement', async () => {
      let result = { status: '' }

      try {
        result = await service.disburseErc20('0xbf51c40cdb04a8bbf14581c2fb3b9b4d7de39dcc')
      } catch (e) {
        console.error(e)
      }

      assert.notEqual(result.status, 'FAILED')
    })
  })
})
