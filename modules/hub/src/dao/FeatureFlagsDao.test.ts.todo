import DBEngine, {PostgresDBEngine} from '../DBEngine'
import {Client} from 'pg'
import Config from '../Config'
import eraseDb from '../testing/eraseDb'
import FeatureFlagsDao, {PostgresFeatureFlagsDao} from './FeatureFlagsDao'
import {assert} from 'chai'

let func = process.env.DATABASE_URL_TEST ? describe : xdescribe

func('FeatureFlagsDao', () => {
  let client: DBEngine<Client>

  let dao: FeatureFlagsDao

  const addr1 = '0x08e4f70109ccc5135f50cc359d24cb7686247df4'
  const addr2 = '0x18e4f70109ccc5135f50cc359d24cb7686247df5'

  before(() => {
    client = new PostgresDBEngine({
      databaseUrl: process.env.DATABASE_URL_TEST
    } as Config)

    return client.connect()
  })

  after(() => {
    return client.disconnect()
  })

  beforeEach(async () => {
    await eraseDb(client)
    dao = new PostgresFeatureFlagsDao(client)
  })

  it('should return modified feature flags for users with rows in the database', async () => {
    await client.exec((c: Client) => c.query(`
      INSERT INTO feature_flags (address, booty_support) VALUES ('${addr1}', true)
    `))

    const res = await dao.flagsFor(addr1)
    assert.isTrue(res.bootySupport)
  })

  it('should return default feature flags for users without rows in the database', async () => {
    const res = await dao.flagsFor(addr2)
    assert.isFalse(res.bootySupport)
  })
})
