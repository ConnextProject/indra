import * as chai from 'chai'
import { assert } from 'chai'
import * as sinon from 'sinon'
import DBEngine, { PostgresDBEngine } from '../DBEngine'
import { Client } from 'pg'
import Config from '../Config'
import eraseDb from '../testing/eraseDb'
import * as chaiAsPromised from 'chai-as-promised'
import {
  default as ChannelClaimsDao,
  PostgresChannelClaimsDao,
} from './ChannelClaimsDao'
import { ChannelClaim, ChannelClaimStatus } from '../domain/ChannelClaim'

let func = process.env.DATABASE_URL_TEST ? describe : xdescribe

func('ChannelClaimsDao', () => {
  let client: DBEngine<Client>

  let dao: ChannelClaimsDao

  let sandbox: sinon.SinonSandbox

  before(() => {
    chai.use(chaiAsPromised)

    client = new PostgresDBEngine({
      databaseUrl: process.env.DATABASE_URL_TEST,
    } as Config)

    return client.connect()
  })

  after(() => {
    return client.disconnect()
  })

  beforeEach(async () => {
    await eraseDb(client)
    dao = new PostgresChannelClaimsDao(client)
    sandbox = sinon.createSandbox()
  })

  afterEach(async () => {
    await eraseDb(client)
    sandbox.restore()
  })

  describe('#byId', () => {
    beforeEach(async () => {
      await client.exec(async (c: Client) => {
        await c.query(`
          INSERT INTO channel ("channelId", kind, sender, receiver, value, spent, state)
            VALUES ('0xcabdab', 'shared:channel', '0x123', '0xabc', 10000, 1500, 0);
        `)
      })

      await dao.create('0xcabdab')
      await dao.markFailed('0xcabdab')
      await dao.create('0xcabdab')
    })

    it('should return a channel', async () => {
      const chan = await dao.byId('0xcabdab')
      assert.isNotNull(chan)
      assert.strictEqual(chan!.channelId, '0xcabdab')
      assert.strictEqual(chan!.status, ChannelClaimStatus.NEW)
    })
  })

  describe('#create', () => {
    beforeEach(async () => {
      sandbox.stub(Date, 'now').returns(1234)

      await client.exec(async (c: Client) => {
        await c.query(`
          INSERT INTO channel ("channelId", kind, sender, receiver, value, spent, state)
            VALUES ('0xcabdab', 'shared:channel', '0x123', '0xabc', 10000, 1500, 0);
        `)
      })
    })

    it('should return a channel', async () => {
      const chan = await dao.create('0xcabdab')

      assert.deepEqual(chan, {
        channelId: '0xcabdab',
        status: ChannelClaimStatus.NEW,
        createdAt: 1234,
        pendingAt: null,
        confirmedAt: null,
        failedAt: null,
      })
    })

    it('should throw an error if multiple claims are inputted for one channel', async () => {
      await dao.create('0xcabdab')
      return assert.isRejected(dao.create('0xcabdab'))
    })
  })

  function testStateMachine(
    method: string,
    dateProp: string,
    status: ChannelClaimStatus,
    transitioner?: () => void,
  ) {
    describe(`#${method}`, () => {
      let ret: ChannelClaim

      beforeEach(async () => {
        await client.exec(async (c: Client) => {
          await c.query(`
            INSERT INTO channel ("channelId", kind, sender, receiver, value, spent, state)
              VALUES ('0xcabdab', 'shared:channel', '0x123', '0xabc', 10000, 1500, 0);
          `)
        })

        await dao.create('0xcabdab')

        if (transitioner) {
          await transitioner()
        }

        const aDao = dao as any
        ret = await aDao[method].call(aDao, '0xcabdab')
      })

      it(`should mark the status as ${status}`, () => {
        assert.strictEqual(ret.status, status)
      })

      it(`should mark ${dateProp} properly`, () => {
        let aRet = ret as any
        assert.isNumber(aRet[dateProp])
      })
    })
  }

  testStateMachine('markPending', 'pendingAt', ChannelClaimStatus.PENDING)
  testStateMachine(
    'markConfirmed',
    'confirmedAt',
    ChannelClaimStatus.CONFIRMED,
    async () => {
      await dao.markPending('0xcabdab')
    },
  )
  testStateMachine('markFailed', 'failedAt', ChannelClaimStatus.FAILED)
})
