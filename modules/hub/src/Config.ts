import { Registry } from './Container'
import { BN, toBN, toWei } from './util'
import camelize from './util/camelize'

const ENV_VARS = [
  'AUTH_DOMAIN_WHITELIST',
  'AUTH_REALM',
  'CARD_IMAGE_URL',
  'CARD_NAME',
  'CHANNEL_MANAGER_ADDRESS',
  'COINPAYMENTS_API_KEY',
  'COINPAYMENTS_API_SECRET',
  'COINPAYMENTS_IPN_SECRET',
  'COINPAYMENTS_MERCHANT_ID',
  'DATABASE_URL',
  'ETH_NETWORK_ID',
  'ETH_RPC_URL',
  'FORCE_SSL',
  'HOT_WALLET_ADDRESS',
  'HTTPS_PORT',
  'HUB_PUBLIC_URL',
  'LOG_LEVEL',
  'MIN_SETTLEMENT_PERIOD',
  'PORT',
  'PRIVATE_KEY_FILE',
  'REALTIME_DB_SECRET', // TODO: do we use this?
  'RECIPIENT_WHITELIST',
  'REDIS_URL',
  'SERVICE_USER_KEY',
  'SESSION_SECRET',
  'SHOULD_COLLATERALIZE_URL',
  'TOKEN_CONTRACT_ADDRESS',
]

const env = process.env.NODE_ENV || 'development'
function envswitch(vals: any) {
  let res = vals[env]
  if (res === undefined)
    throw new Error(`No valid specified for env '${env}' in ${JSON.stringify(vals)}`)
  return res
}

export interface BrandingConfig {
  title?: string
  companyName?: string
  backgroundColor?: string
  textColor?: string
}

export class Config {
  static fromEnv(overrides?: Partial<Config>): Config {
    const instance = new Config()

    // prettier-ignore
    ENV_VARS.forEach((v: string) => {
      const val: any = process.env[v]
      if (val !== undefined)
        (instance as any)[camelize(v, '_')] = v.endsWith('ADDRESS') ? val.toLowerCase() : val
    })

    for (let key in (overrides || {}))
      instance[key] = overrides[key]

    return instance
  }

  public isProduction = env == 'production'
  public isStage = env == 'staging'
  public isDev = env == 'development'
  public ethRpcUrl: string = ''
  public ethNetworkId: string = ''
  public databaseUrl: string = ''
  public logLevel: number = 3
  public redisUrl: string = ''
  public channelManagerAddress: string = ''
  public authRealm: string = ''
  public authDomainWhitelist: string[] = []
  public adminAddresses?: string[] = []
  public serviceKey: string = 'omqGMZzn90vFJskXFxzuO3gYHM6M989spw99f3ngRSiNSOUdB0PmmYTvZMByUKD'
  public port: number = 8080
  public httpsPort: number = 8443
  // URL used to check whether a user should receive collateral.
  // Called by ChannelsService.shouldCollateralize:
  //
  //   GET `${shouldCollateralizeUrl}/${user}`
  //
  // And is expected to return:
  //
  //   { shouldCollateralize: true | false }
  //
  // If the value is 'NO_CHECK' then no check will be performed.
  public shouldCollateralizeUrl: string | 'NO_CHECK' = 'NO_CHECK'
  public forceSsl: boolean | false = process.env.FORCE_SSL && process.env.FORCE_SSL.toLowerCase() === 'true'
  public recipientAddress: string = ''
  public hotWalletAddress: string = ''
  public hotWalletMinBalance: string = toWei('6.9').toString()
  public sessionSecret: string = ''
  public staleChannelDays?: number = process.env.STALE_CHANNEL_DAYS ? parseInt(process.env.STALE_CHANNEL_DAYS) : null // if null, will not dispute
  public registry?: Registry
  public branding: BrandingConfig
  public tokenContractAddress: string = ''
  // amount users can have in any one channel for their balance
  public channelBeiLimit = toWei(process.env.CHANNEL_BEI_LIMIT || 69)
  // minimum amount of bei the hub will put into any one channel
  // for collateral
  public beiMinCollateralization = toWei(process.env.BEI_MIN_COLLATERALIZATION || 10)
  // max bei the hub will collateralize at any point
  public beiMaxCollateralization = toWei(process.env.BEI_MAX_COLLATERALIZATION || 169)
  public recentPaymentsInterval  = (process.env.RECENT_PAYMENTS_INTERVAL || '10 minutes')

  public threadBeiLimit = toWei(process.env.THREAD_BEI_LIMIT || 10)
  public channelBeiDeposit = toWei(process.env.CHANNEL_BEI_DEPOSIT || 1000)
  
  public privateKeyFile: string = ''

  // mailgun
  public mailgunApiKey = envswitch({
    development: "230ca5a7977dbac40b43dceb228d9a66-39bc661a-81795393",
    staging: "230ca5a7977dbac40b43dceb228d9a66-39bc661a-81795393",
    production: "set by environment variable"
  })

  public hubPublicUrl = envswitch({
    development: null, // will be generated by NgrokService
    staging: 'https://hub-staging.spankdev.com',
    production: 'https://hub.spankchain.com',
  })

  public coinpaymentsMerchantId = envswitch({
    development: '898d6ead05235f6081e97a58a6699289',
    staging: '898d6ead05235f6081e97a58a6699289',
    production: 'set by environment variable',
  })

  public coinpaymentsApiKey = envswitch({
    development: '62eceb03e8fcb4f8ebdc1b8f43e1e6f4b9b120f0856061d228cf04b01ed5cf08',
    staging: '62eceb03e8fcb4f8ebdc1b8f43e1e6f4b9b120f0856061d228cf04b01ed5cf08',
    production: 'set by environment variable',
  })

  public coinpaymentsApiSecret = envswitch({
    development: 'A78Dba053693985Fa8F9aad010352caa61a6e2ECb7E20E87AcfABc7ee37C3005',
    staging: 'A78Dba053693985Fa8F9aad010352caa61a6e2ECb7E20E87AcfABc7ee37C3005',
    production: 'set by environment variable',
  })

  public coinpaymentsIpnSecret = envswitch({
    development: 'U1BC9v1s3l0zxdH3',
    staging: 'U1BC9v1s3l0zxdH3',
    production: 'set by environment variable',
  })
}

export default Config
