name: CD

on:
  push:
    branches:
      - master
      - staging

jobs:
  test-ssh:
    env:
      KEY: $HOME/.ssh/id_rsa
      SSH_DIR: $HOME/.ssh
      SSH_KEY: ${{ secrets.SSH_KEY }}
      STAGING: staging.indra.connext.network
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: setup ssh stuff
      run: |
        mkdir -p $SSH_DIR
        touch $KEY
        echo '-----BEGIN RSA PRIVATE KEY-----' >> $KEY
        echo $SSH_KEY >> $KEY
        echo '-----END RSA PRIVATE KEY-----' >> $KEY
        chmod 400 $KEY
        ssh-keyscan -t rsa $STAGING >> $SSH_DIR/known_hosts
        ssh-keygen -lf $KEY
    - name: ssh test 0
      run: ssh -i $KEY -o StrictHostKeyChecking=no -A -tt ubuntu@$STAGING hostname
    - name: ssh test 1
      run: |
        ssh -i $KEY -o StrictHostKeyChecking=no -A -tt ubuntu@$STAGING "bash -s" <<EOF
          echo "we're in"
          hostname
          exit
        EOF
    - name: ssh test 2
      run: |
        ssh -i $KEY -o StrictHostKeyChecking=no -A ubuntu@$STAGING "bash -s" <<EOF
          set -e
          echo we're in
          hostname
          exit
        EOF
    - name: ssh test 3
      run: |
        ssh -i $KEY -o StrictHostKeyChecking=no ubuntu@$STAGING "bash -s" <<EOF
          set -e
          echo we're in
          hostname
          exit
        EOF
    - name: ssh test 4
      run: |
        ssh -i $KEY ubuntu@$STAGING "bash -s" <<EOF
          set -e
          echo we're in
          hostname
          exit
        EOF
    - name: ssh test 5
      uses: appleboy/ssh-action@master
      with:
        host: staging.indra.connext.network
        username: ubuntu
        key: ${{ secrets.SSH_KEY }}
        port: 22
        script: hostname


  test-units:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: make dev
    - run: make test-cf
    - run: make test-node

  test-bot:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: make prod
    - run: make start-test
    - run: make test-bot

  test-ui:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: make prod
    - run: make start-test
    - run: make test-ui

  push-latest:
    env:
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    if: endsWith(github.ref, 'staging')
    needs: [test-units, test-bot, test-ui]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    - name: push images
      run: make push-latest

  push-versioned:
    env:
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    if: endsWith(github.ref, 'master')
    needs: [test-units, test-bot, test-ui]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    - name: push images
      run: make push-versioned

  deploy-staging:
    env:
      INDRA_ADMIN_TOKEN: ${{ secrets.INDRA_ADMIN_TOKEN }}
      RINKEBY_ETH_PROVIDER: ${{ secrets.RINKEBY_ETH_PROVIDER }}
      SSH_DIR: $HOME/.ssh
      SSH_KEY: ${{ secrets.SSH_KEY }}
      STAGING_DOMAINNAME: staging.indra.connext.network
    if: endsWith(github.ref, 'staging')
    needs: [push-latest]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: setup ssh stuff
      run: |
        mkdir -p $SSH_DIR
        touch $SSH_DIR/id_rsa
        echo '-----BEGIN RSA PRIVATE KEY-----' >> $SSH_DIR/id_rsa
        echo $SSH_KEY >> $SSH_DIR/id_rsa
        echo '-----END RSA PRIVATE KEY-----' >> $SSH_DIR/id_rsa
        chmod 400 $SSH_DIR/id_rsa
        ssh-keyscan -t rsa $STAGING_DOMAINNAME >> $SSH_DIR/known_hosts
    - name: deploy to staging
      run: |
        ssh ubuntu@$STAGING_DOMAINNAME "bash -s" <<EOF
          set -e
          git clone https://github.com/ConnextProject/indra.git || true
          cd indra
          git checkout --force staging
          git fetch
          git reset --hard $GITHUB_SHA
          export INDRA_MODE="staging"
          export INDRA_ETH_PROVIDER=$RINKEBY_ETH_PROVIDER
          export INDRA_DOMAINNAME="$STAGING_DOMAINNAME"
          export INDRA_ADMIN_TOKEN="$INDRA_ADMIN_TOKEN"
          make restart-prod
          docker container prune -f
          docker image ls -q | xargs docker image rm || true
        EOF

  deploy-prod:
    env:
      INDRA_ADMIN_TOKEN: ${{ secrets.INDRA_ADMIN_TOKEN }}
      MAINNET_DOMAINNAME: indra.connext.network
      MAINNET_ETH_PROVIDER: ${{ secrets.MAINNET_ETH_PROVIDER }}
      RINKEBY_DOMAINNAME: rinkeby.indra.connext.network
      RINKEBY_ETH_PROVIDER: ${{ secrets.RINKEBY_ETH_PROVIDER }}
    if: endsWith(github.ref, 'master')
    needs: [push-versioned]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: setup ssh stuff
      run: |
        mkdir -p $SSH_DIR
        touch $SSH_DIR/id_rsa
        echo '-----BEGIN RSA PRIVATE KEY-----' >> $SSH_DIR/id_rsa
        echo $SSH_KEY >> $SSH_DIR/id_rsa
        echo '-----END RSA PRIVATE KEY-----' >> $SSH_DIR/id_rsa
        chmod 400 $SSH_DIR/id_rsa
        ssh-keyscan -t rsa $STAGING_DOMAINNAME >> $SSH_DIR/known_hosts
    - name: deploy to prod (rinkeby)
      run: |
        ssh ubuntu@$RINKEBY_DOMAINNAME "bash -s" <<EOF
          set -e
          git clone https://github.com/ConnextProject/indra.git || true
          cd indra
          git checkout --force staging
          git fetch
          git reset --hard $GITHUB_SHA
          export INDRA_MODE="staging"
          export INDRA_ETH_PROVIDER=$RINKEBY_ETH_PROVIDER
          export INDRA_DOMAINNAME="$RINKEBY_DOMAINNAME"
          export INDRA_ADMIN_TOKEN="$INDRA_ADMIN_TOKEN"
          make restart-prod
          docker container prune -f
          docker image ls -q | xargs docker image rm || true
        EOF
    - name: deploy to prod (mainnet)
      run: |
        ssh ubuntu@$MAINNET_DOMAINNAME "bash -s" <<EOF
          set -e
          git clone https://github.com/ConnextProject/indra.git || true
          cd indra
          git checkout --force staging
          git fetch
          git reset --hard $GITHUB_SHA
          export INDRA_MODE="staging"
          export INDRA_ETH_PROVIDER=$MAINNET_ETH_PROVIDER
          export INDRA_DOMAINNAME="$MAINNET_DOMAINNAME"
          export INDRA_ADMIN_TOKEN="$INDRA_ADMIN_TOKEN"
          make restart-prod
          docker container prune -f
          docker image ls -q | xargs docker image rm || true
        EOF
